-- Migration: Create Conversation History Table
-- Description: Stores the history of conversations between users and the PesaGuru financial advisory chatbot

-- Check if table already exists before creating
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[conversation_history]') AND type in (N'U'))
BEGIN
    CREATE TABLE [dbo].[conversation_history] (
        -- Primary key and identifiers
        [id] BIGINT NOT NULL IDENTITY(1,1) PRIMARY KEY,
        [user_id] BIGINT NOT NULL, -- Foreign key to users table
        [session_id] NVARCHAR(255) NOT NULL, -- Identifier for grouping related messages
        
        -- Message Content
        [user_query] NVARCHAR(MAX), -- The financial question or message sent by the user
        [chatbot_response] NVARCHAR(MAX), -- The financial advice or response generated by the chatbot
        
        -- NLP Analysis
        [intent] NVARCHAR(255), -- The detected intent of the user query (e.g., loan_inquiry, investment_advice)
        [entities] NVARCHAR(MAX), -- Financial entities extracted from the user query (e.g., stock names, loan terms)
        [financial_terms] NVARCHAR(MAX), -- Specific financial terms mentioned in the conversation
        
        -- Categorization & Context
        [topic_category] NVARCHAR(100), -- Category of financial topic (investment, savings, loans, budgeting, etc.)
        [language] NVARCHAR(50) DEFAULT 'english', -- Language of the conversation (english, swahili)
        [risk_profile_context] NVARCHAR(50), -- User risk profile context during this conversation
        [related_product_ids] NVARCHAR(MAX), -- IDs of financial products discussed in the conversation
        
        -- Analysis Metrics
        [sentiment_score] DECIMAL(5, 2), -- Sentiment analysis score of the user query (-1.0 to 1.0)
        [confidence_score] DECIMAL(5, 2), -- Confidence score of the chatbot response (0.0 to 1.0)
        
        -- User Feedback
        [feedback_rating] TINYINT, -- User feedback rating on the chatbot response (1-5, NULL if no feedback)
        [feedback_text] NVARCHAR(MAX), -- Additional textual feedback from the user
        
        -- Status Flags
        [is_read] BIT DEFAULT 0, -- Whether the user has read the chatbot response
        [was_helpful] BIT, -- User indicated if response was helpful (for training)
        [follow_up_required] BIT DEFAULT 0, -- Flag indicating if human advisor follow-up is needed
        
        -- M-Pesa Related (Kenya-specific)
        [contains_mpesa_txn] BIT DEFAULT 0, -- Whether the conversation involved M-Pesa transactions
        [mpesa_transaction_id] NVARCHAR(255), -- Reference to an M-Pesa transaction if applicable
        
        -- Timestamps
        [created_at] DATETIME2 DEFAULT GETDATE(), -- Timestamp when the message was created
        [updated_at] DATETIME2 DEFAULT GETDATE() -- Timestamp when the record was last updated
    );

    -- Indexes for efficient querying
    CREATE INDEX [idx_user_id] ON [dbo].[conversation_history] ([user_id]);
    CREATE INDEX [idx_session_id] ON [dbo].[conversation_history] ([session_id]);
    CREATE INDEX [idx_topic_category] ON [dbo].[conversation_history] ([topic_category]);
    CREATE INDEX [idx_language] ON [dbo].[conversation_history] ([language]);
    CREATE INDEX [idx_created_at] ON [dbo].[conversation_history] ([created_at]);
    CREATE INDEX [idx_sentiment] ON [dbo].[conversation_history] ([sentiment_score]);
    CREATE INDEX [idx_follow_up] ON [dbo].[conversation_history] ([follow_up_required]);

    -- Add foreign key constraint (assuming users table exists)
    -- Note: Uncomment this once the users table is created
    -- ALTER TABLE [dbo].[conversation_history] 
    -- ADD CONSTRAINT [FK_conversation_history_users] 
    -- FOREIGN KEY ([user_id]) REFERENCES [dbo].[users]([id]) ON DELETE CASCADE;
END

-- Create trigger to update timestamps
GO
IF EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[trg_conversation_history_update]'))
    DROP TRIGGER [dbo].[trg_conversation_history_update];
GO

CREATE TRIGGER [dbo].[trg_conversation_history_update]
ON [dbo].[conversation_history]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    
    UPDATE [dbo].[conversation_history]
    SET [updated_at] = GETDATE()
    FROM [dbo].[conversation_history] c
    INNER JOIN inserted i ON c.id = i.id;
END
GO